<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Unificador de Listas M3U - Versão Melhorada</title>
<style>
    * { margin:0; padding:0; box-sizing:border-box; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;}
    body { background: linear-gradient(135deg,#1a2a6c,#b21f1f,#fdbb2d); color:#fff; min-height:100vh; padding:20px;}
    .container { max-width:1000px; margin:0 auto; background:rgba(0,0,0,0.7); border-radius:15px; padding:25px; box-shadow:0 10px 30px rgba(0,0,0,0.5);}
    header { text-align:center; margin-bottom:30px; padding-bottom:20px; border-bottom:1px solid rgba(255,255,255,0.2);}
    h1 { font-size:2.5rem; margin-bottom:10px; color:#fdbb2d; text-shadow:2px 2px 4px rgba(0,0,0,0.5);}
    .description { font-size:1.1rem; color:#ccc; max-width:800px; margin:0 auto; line-height:1.6;}
    .urls-list { background:rgba(0,0,0,0.3); border-radius:10px; padding:15px; margin:20px 0; text-align:left;}
    .urls-list h3 { margin-bottom:10px; color:#fdbb2d;}
    .urls-list ul { list-style-type:none; padding-left:20px;}
    .urls-list li { margin:8px 0; padding:8px; background:rgba(255,255,255,0.1); border-radius:5px; word-break:break-all; font-size:0.9rem;}
    .controls { display:flex; justify-content:center; gap:15px; margin:25px 0; flex-wrap:wrap;}
    button { padding:14px 25px; font-size:1.1rem; border:none; border-radius:8px; cursor:pointer; background:linear-gradient(to right,#1e90ff,#0a74da); color:white; transition:all 0.3s ease; box-shadow:0 4px 6px rgba(0,0,0,0.2); min-width:200px;}
    button:hover { transform:translateY(-3px); box-shadow:0 6px 10px rgba(0,0,0,0.3); background:linear-gradient(to right,#0a74da,#085aac);}
    button:active { transform:translateY(0);}
    button:disabled { background:#555; cursor:not-allowed; transform:none; box-shadow:none;}
    #downloadBtn { background: linear-gradient(to right,#28a745,#1e7e34);}
    #downloadBtn:hover { background: linear-gradient(to right,#1e7e34,#145a23);}
    .progress { margin:20px 0; text-align:center; display:none;}
    .progress-bar { height:10px; background:rgba(255,255,255,0.2); border-radius:5px; overflow:hidden; margin:10px 0;}
    .progress-bar-inner { height:100%; background:linear-gradient(to right,#1e90ff,#0a74da); width:0%; transition:width 0.3s ease; border-radius:5px;}
    .preview-container { margin-top:30px; }
    .preview-container h3 { margin-bottom:15px; color:#fdbb2d; display:flex; align-items:center; justify-content:center; gap:10px;}
    .canais-count { background:#fdbb2d; color:#000; padding:3px 10px; border-radius:20px; font-size:0.9rem;}
    pre { text-align:left; background:#111; padding:20px; border-radius:10px; max-height:400px; overflow-y:auto; white-space:pre-wrap; font-family:'Courier New',Courier,monospace; line-height:1.5; font-size:0.9rem;}
    .status { margin-top:15px; padding:10px; border-radius:5px; text-align:center; display:none;}
    .success { background: rgba(40,167,69,0.2); border:1px solid #28a745;}
    .error { background: rgba(220,53,69,0.2); border:1px solid #dc3545;}
    footer { margin-top:40px; text-align:center; color:#ccc; font-size:0.9rem;}
    @media (max-width:768px){.container{padding:15px;} h1{font-size:2rem;} button{width:100%;} .controls{flex-direction:column;}}
</style>
</head>
<body>
<div class="container">
<header>
<h1>Unificador de Listas M3U - Melhorado</h1>
<p class="description">Clique em "Gerar Lista" para processar todas as listas M3U simultaneamente. Depois, clique em "Baixar Lista" para salvar o arquivo completo.</p>
</header>

<div class="urls-list">
<h3>Listas que serão unificadas:</h3>
<ul>
<li>https://raw.githubusercontent.com/listadobill/tv/refs/heads/main/servidor1.m3u</li>
<li>https://raw.githubusercontent.com/listadobill/tv/refs/heads/main/servidor2.m3u</li>
<li>https://iptv-org.github.io/iptv/countries/br.m3u</li>
</ul>
</div>

<div class="controls">
<button id="generateBtn">Gerar Lista Unificada</button>
<button id="downloadBtn" disabled>Baixar Lista</button>
</div>

<div class="progress" id="progressSection">
<div class="progress-bar"><div class="progress-bar-inner" id="progressBar"></div></div>
<p>Processando: <span id="progressText">0%</span></p>
</div>

<div class="status" id="statusMessage"></div>

<div class="preview-container">
<h3>Prévia da lista <span class="canais-count" id="canaisCount">0 canais</span></h3>
<pre id="preview">A prévia aparecerá aqui.</pre>
</div>

<footer>
<p>Unificador de Listas M3U - Versão Melhorada &copy; 2025</p>
</footer>
</div>

<script>
const urls = [
    "https://raw.githubusercontent.com/listadobill/tv/refs/heads/main/servidor1.m3u",
    "https://raw.githubusercontent.com/listadobill/tv/refs/heads/main/servidor2.m3u",
    "https://iptv-org.github.io/iptv/countries/br.m3u"
];

let canais = [];
let urlsUnicas = new Set();

function showStatus(message,type){
    const status = document.getElementById('statusMessage');
    status.textContent = message;
    status.className = 'status '+type;
    status.style.display='block';
    setTimeout(()=>{status.style.display='none';},5000);
}

function updateProgress(percent,message){
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const progressSection = document.getElementById('progressSection');
    progressBar.style.width = percent+'%';
    progressText.textContent = percent+'% - '+message;
    progressSection.style.display='block';
}

async function fetchLista(url){
    try{
        const controller = new AbortController();
        const timeoutId = setTimeout(()=>controller.abort(),15000);
        const res = await fetch(url,{signal:controller.signal});
        clearTimeout(timeoutId);
        if(!res.ok) throw new Error("Erro ao baixar "+url);
        return await res.text();
    }catch(e){
        console.error(e);
        showStatus("Erro ao baixar: "+url,"error");
        return "";
    }
}

function processarM3U(conteudo){
    const linhas = conteudo.split('\n');
    const blocos = [];
    let bloco = null;
    for(const linha of linhas){
        const l=linha.trim();
        if(!l) continue;
        if(l.startsWith('#EXTINF:')){
            if(bloco) blocos.push(bloco);
            bloco={extinf:l,url:null};
        } else if(bloco && !l.startsWith('#') && bloco.url===null){
            bloco.url=l;
            blocos.push(bloco);
            bloco=null;
        }
    }
    if(bloco) blocos.push(bloco);
    return blocos;
}

function extrairNome(linha){
    const match = linha.match(/tvg-name="([^"]+)"/);
    if(match) return match[1];
    const comma = linha.indexOf(',');
    return comma!==-1?linha.substring(comma+1).trim():"SEM_NOME";
}

function getDataHoje(){
    const hoje=new Date();
    const dia=String(hoje.getDate()).padStart(2,'0');
    const mes=String(hoje.getMonth()+1).padStart(2,'0');
    const ano=hoje.getFullYear();
    return `${dia}/${mes}/${ano}`;
}

async function gerarLista(){
    const generateBtn=document.getElementById('generateBtn');
    const downloadBtn=document.getElementById('downloadBtn');
    generateBtn.disabled=true;
    downloadBtn.disabled=true;
    canais=[];
    urlsUnicas.clear();
    document.getElementById('preview').textContent='Processando...';

    const resultados = await Promise.all(urls.map((u)=>fetchLista(u)));

    let totalBlocos=0;
    const blocosTotais=[];
    resultados.forEach(res=>{
        if(res){
            const blocos=processarM3U(res);
            totalBlocos+=blocos.length;
            blocosTotais.push(...blocos);
        }
    });

    for(let i=0;i<blocosTotais.length;i++){
        const b=blocosTotais[i];
        if(b.url && !urlsUnicas.has(b.url)){
            urlsUnicas.add(b.url);
            canais.push([b.extinf,b.url]);
        }
        if(i%50===0){
            updateProgress(Math.round((i/blocosTotais.length)*90),"Processando canais "+i+"/"+blocosTotais.length);
            await new Promise(r=>setTimeout(r,1));
        }
    }

    canais.sort((a,b)=>extrairNome(a[0]).localeCompare(extrairNome(b[0])));

    // Inserir canal de atualização no início
    const dataHoje=getDataHoje();
    canais.unshift([`#EXTINF:-1, Lista atualizada em ${dataHoje}`,"http://atualizacao.local/"]);

    let previewText="#EXTM3U\n";
    const limitePreview=Math.min(20,canais.length);
    for(let i=0;i<limitePreview;i++){
        previewText+=canais[i][0]+"\n"+canais[i][1]+"\n";
    }
    if(canais.length>20) previewText+="\n... ("+(canais.length-20)+" canais adicionais)";
    document.getElementById('preview').textContent=previewText;
    document.getElementById('canaisCount').textContent=canais.length+" canais";

    updateProgress(100,"Lista processada!");
    generateBtn.disabled=false;
    downloadBtn.disabled=false;
    showStatus(`Lista gerada com sucesso! ${canais.length} canais processados.`,"success");

    setTimeout(()=>{document.getElementById('progressSection').style.display='none';},2000);
}

function baixarLista(){
    if(canais.length===0){ showStatus("Gere a lista primeiro","error"); return; }
    let conteudo="#EXTM3U\n";
    const progressSection=document.getElementById('progressSection');
    const progressBar=document.getElementById('progressBar');
    const progressText=document.getElementById('progressText');
    progressSection.style.display='block';
    progressBar.style.width='0%';
    progressText.textContent='0% - Preparando download';

    for(let i=0;i<canais.length;i++){
        conteudo+=canais[i][0]+"\n"+canais[i][1]+"\n";
        if(i%100===0){
            const percent=Math.round((i/canais.length)*100);
            progressBar.style.width=percent+'%';
            progressText.textContent=percent+'% - Gerando arquivo';
        }
    }

    progressBar.style.width='100%';
    progressText.textContent='100% - Arquivo pronto';
    const blob=new Blob([conteudo],{type:"audio/x-mpegurl"});
    const url=URL.createObjectURL(blob);
    const a=document.createElement('a');
    a.href=url; a.download='lista_unificada.m3u';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    showStatus("Download iniciado!","success");
    setTimeout(()=>{progressSection.style.display='none';},2000);
}

document.getElementById('generateBtn').addEventListener('click',gerarLista);
document.getElementById('downloadBtn').addEventListener('click',baixarLista);
</script>
</body>
</html>
